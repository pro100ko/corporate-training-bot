import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import DatabaseManager
from utils.keyboards import Keyboards
from utils.helpers import MessageHelper

router = Router()
logger = logging.getLogger(__name__)

class SearchStates(StatesGroup):
    waiting_for_query = State()

@router.callback_query(lambda c: c.data == "search_products")
async def search_products_handler(query: types.CallbackQuery, state: FSMContext, **kwargs):
    """Handle search products menu"""
    text = (
        "üîç **–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤**\n\n"
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:\n\n"
        "üìù –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞\n"
        "‚Ä¢ –ö–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:"
    )
    
    await MessageHelper.safe_edit_message(
        query,
        text=text,
        reply_markup=None,
        parse_mode="Markdown"
    )
    
    await state.set_state(SearchStates.waiting_for_query)

@router.message(SearchStates.waiting_for_query)
async def search_query_handler(message: types.Message, state: FSMContext, **kwargs):
    """Handle search query input"""
    try:
        query_text = message.text.strip() if message.text else ""
        
        if len(query_text) < 2:
            await message.answer(
                "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        # Search for products
        products = await DatabaseManager.search_products(query_text)
        
        await state.clear()
        
        if not products:
            text = (
                f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞**\n\n"
                f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query_text}'\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            )
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            
            builder.row(
                types.InlineKeyboardButton(
                    text="üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                    callback_data="knowledge_base"
                )
            )
            
            builder.row(
                types.InlineKeyboardButton(
                    text="üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data="search_products"
                )
            )
            
            builder.row(
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            )
            
            await message.answer(
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
            return
        
        text = (
            f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞**\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query_text}'\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        for product in products:
            builder.row(
                types.InlineKeyboardButton(
                    text=f"üì¶ {product.name}",
                    callback_data=f"search_result:{product.id}"
                )
            )
        
        builder.row(
            types.InlineKeyboardButton(
                text="üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞",
                callback_data="search_products"
            )
        )
        
        builder.row(
            types.InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        await message.answer(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in search_query_handler: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("search_result:"))
async def search_result_handler(query: types.CallbackQuery, **kwargs):
    """Handle search result selection"""
    try:
        product_id = int(query.data.split(":")[1])
        
        # Get product with category info
        async with DatabaseManager.AsyncSessionLocal() as session:
            from sqlalchemy import text
            result = await session.execute(
                text("""
                SELECT p.id, p.name, p.description, p.image_file_id, p.document_file_id, 
                       c.name as category_name, c.id as category_id
                FROM products p 
                LEFT JOIN categories c ON p.category_id = c.id 
                WHERE p.id = :product_id
                """),
                {"product_id": product_id}
            )
            product = result.fetchone()
        
        if not product:
            await MessageHelper.safe_answer_callback(
                query, 
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
                show_alert=True
            )
            return
        
        # Check if product has test questions
        questions = await DatabaseManager.get_test_questions(product_id)
        has_test = len(questions) > 0
        
        text = MessageHelper.format_product_info(product, product.category_name)
        
        if has_test:
            text += f"\nüìù –î–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç ({len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤)"
        
        # Create keyboard with search-specific back button
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        if has_test:
            builder.row(
                types.InlineKeyboardButton(
                    text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
                    callback_data=f"start_test:{product_id}"
                )
            )
        
        builder.row(
            types.InlineKeyboardButton(
                text="üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞",
                callback_data="search_products"
            )
        )
        
        builder.row(
            types.InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        # Send image/document if available
        if product.image_file_id:
            try:
                await query.message.answer_photo(
                    photo=product.image_file_id,
                    caption=text,
                    reply_markup=builder.as_markup(),
                    parse_mode="Markdown"
                )
                await MessageHelper.safe_answer_callback(query)
                return
            except Exception as e:
                logger.warning(f"Failed to send image: {e}")
        
        if product.document_file_id:
            try:
                await query.message.answer_document(
                    document=product.document_file_id,
                    caption=text,
                    reply_markup=builder.as_markup(),
                    parse_mode="Markdown"
                )
                await MessageHelper.safe_answer_callback(query)
                return
            except Exception as e:
                logger.warning(f"Failed to send document: {e}")
        
        # Send as text message if no files or files failed
        await MessageHelper.safe_edit_message(
            query,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid product ID in search_result_handler: {e}")
        await MessageHelper.safe_answer_callback(
            query, 
            "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            show_alert=True
        )
    except Exception as e:
        logger.error(f"Error in search_result_handler: {e}")
        await MessageHelper.safe_answer_callback(
            query, 
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            show_alert=True
        )
