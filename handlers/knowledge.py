import logging
from aiogram import Router, types
from database import DatabaseManager
from utils.keyboards import Keyboards
from utils.helpers import MessageHelper

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(lambda c: c.data == "knowledge_base")
async def knowledge_base_handler(query: types.CallbackQuery, **kwargs):
    """Handle knowledge base menu"""
    try:
        categories = await DatabaseManager.get_categories()
        
        if not categories:
            text = (
                "üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π**\n\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
            )
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.row(
                types.InlineKeyboardButton(
                    text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            )
            
            await MessageHelper.safe_edit_message(
                query,
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
            return
        
        text = (
            "üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π**\n\n"
            f"–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )
        
        keyboard = Keyboards.categories_list(categories, "view_category")
        
        await MessageHelper.safe_edit_message(
            query,
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in knowledge_base_handler: {e}")
        await MessageHelper.safe_answer_callback(
            query, 
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            show_alert=True
        )

@router.callback_query(lambda c: c.data.startswith("view_category:"))
async def view_category_handler(query: types.CallbackQuery, **kwargs):
    """Handle category view"""
    try:
        category_id = int(query.data.split(":")[1])
        
        # Get category info
        categories = await DatabaseManager.get_categories()
        category = next((c for c in categories if c.id == category_id), None)
        
        if not category:
            await MessageHelper.safe_answer_callback(
                query, 
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                show_alert=True
            )
            return
        
        # Get products in this category
        products = await DatabaseManager.get_products_by_category(category_id)
        
        text = (
            f"üìÅ **{category.name}**\n\n"
        )
        
        if category.description:
            text += f"üìÑ {category.description}\n\n"
        
        if products:
            text += f"–ü—Ä–æ–¥—É–∫—Ç—ã ({len(products)}):"
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            
            for product in products:
                builder.row(
                    types.InlineKeyboardButton(
                        text=f"üì¶ {product.name}",
                        callback_data=f"view_product:{product.id}"
                    )
                )
            
            builder.row(
                types.InlineKeyboardButton(
                    text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    callback_data="knowledge_base"
                )
            )
            
            await MessageHelper.safe_edit_message(
                query,
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
        else:
            text += "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.row(
                types.InlineKeyboardButton(
                    text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    callback_data="knowledge_base"
                )
            )
            
            await MessageHelper.safe_edit_message(
                query,
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
        
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid category ID in view_category_handler: {e}")
        await MessageHelper.safe_answer_callback(
            query, 
            "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            show_alert=True
        )
    except Exception as e:
        logger.error(f"Error in view_category_handler: {e}")
        await MessageHelper.safe_answer_callback(
            query, 
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            show_alert=True
        )

@router.callback_query(lambda c: c.data.startswith("view_product:"))
async def view_product_handler(query: types.CallbackQuery, **kwargs):
    """Handle product view"""
    try:
        product_id = int(query.data.split(":")[1])
        
        # Get product with category info
        async with DatabaseManager.AsyncSessionLocal() as session:
            from sqlalchemy import text
            result = await session.execute(
                text("""
                SELECT p.id, p.name, p.description, p.image_file_id, p.document_file_id, 
                       c.name as category_name, c.id as category_id
                FROM products p 
                LEFT JOIN categories c ON p.category_id = c.id 
                WHERE p.id = :product_id
                """),
                {"product_id": product_id}
            )
            product = result.fetchone()
        
        if not product:
            await MessageHelper.safe_answer_callback(
                query, 
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
                show_alert=True
            )
            return
        
        # Check if product has test questions
        questions = await DatabaseManager.get_test_questions(product_id)
        has_test = len(questions) > 0
        
        text = MessageHelper.format_product_info(product, product.category_name)
        
        if has_test:
            text += f"\nüìù –î–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç ({len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤)"
        
        # Send image/document if available
        if product.image_file_id:
            try:
                await query.message.answer_photo(
                    photo=product.image_file_id,
                    caption=text,
                    reply_markup=Keyboards.product_actions(product_id, has_test, product.category_id),
                    parse_mode="Markdown"
                )
                await MessageHelper.safe_answer_callback(query)
                return
            except Exception as e:
                logger.warning(f"Failed to send image: {e}")
        
        if product.document_file_id:
            try:
                await query.message.answer_document(
                    document=product.document_file_id,
                    caption=text,
                    reply_markup=Keyboards.product_actions(product_id, has_test, product.category_id),
                    parse_mode="Markdown"
                )
                await MessageHelper.safe_answer_callback(query)
                return
            except Exception as e:
                logger.warning(f"Failed to send document: {e}")
        
        # Send as text message if no files or files failed
        await MessageHelper.safe_edit_message(
            query,
            text=text,
            reply_markup=Keyboards.product_actions(product_id, has_test, product.category_id),
            parse_mode="Markdown"
        )
        
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid product ID in view_product_handler: {e}")
        await MessageHelper.safe_answer_callback(
            query, 
            "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            show_alert=True
        )
    except Exception as e:
        logger.error(f"Error in view_product_handler: {e}")
        await MessageHelper.safe_answer_callback(
            query, 
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            show_alert=True
        )

@router.callback_query(lambda c: c.data == "back_to_products")
async def back_to_products_handler(query: types.CallbackQuery, **kwargs):
    """Handle back to products navigation"""
    # Go back to knowledge base
    await knowledge_base_handler(query, **kwargs)
